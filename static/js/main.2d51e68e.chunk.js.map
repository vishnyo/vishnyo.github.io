{"version":3,"sources":["layouts/MainLayout/mainLayout.module.scss","components/Search/Search.module.scss","components/Gists/GistsItem/GistsItem.module.scss","components/UserAvatar/UserAvatar.module.scss","components/App/AppContextProvider/AppContext.ts","components/App/AppContextProvider/AppContextProvider.tsx","AppProviders.tsx","components/App/App.tsx","api/Octokit.ts","components/Search/Search.tsx","components/Gists/GistsFile/GistsFile.tsx","components/Gists/GistsFiles/GistsFiles.tsx","components/Gists/GistsItem/GistsItem.tsx","components/Gists/Gists.tsx","components/UserAvatar/UserAvatar.tsx","layouts/MainLayout/MainLayout.tsx","components/Main/Main.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","AppContext","createContext","useAppContext","context","useContext","Error","AppContextProvider","children","useState","currentSearchValue","setCurrentSearchValue","currentUser","setCurrentUser","Provider","value","AppProviders","App","octokit","Octokit","autocomplete","classNames","Text","Typography","Search","debounceId","useRef","options","setOptions","isSearching","setIsSearching","currentUserIsLoading","setCurrentUserIsLoading","searchCurrentUser","useCallback","undefined","users","getByUsername","username","then","data","catch","err","status","notification","error","message","description","finally","handleSearch","clearTimeout","current","window","setTimeout","search","q","items","map","item","login","label","size","src","avatar_url","useEffect","onSelect","option","onPressEnter","e","currentTarget","defaultActiveFirstOption","className","onSearch","notFoundContent","placeholder","enterButton","loading","GistsFile","memo","file","currentSnippet","setCurrentSnippet","isLoading","setIsLoading","fetch","raw_url","res","text","splittedData","split","filter","word","length","join","lineNumberStyle","color","textAlign","width","fontSize","showLineNumbers","language","toLowerCase","style","prism","GistsFiles","title","align","display","alignItems","filename","GistsItem","forks","setForks","files","useMemo","Object","values","uniqueLanguages","Set","gists","listForks","gist_id","id","hoverable","gutter","flex","FileOutlined","ForkOutlined","Group","maxCount","fork","i","owner","tags","marginBottom","borderColor","Gists","gistsList","setGistsList","listForUser","bordered","justify","spinning","gistItem","image","Empty","PRESENTED_IMAGE_SIMPLE","Meta","Card","UserAvatar","position","top","meta","avatar","icon","UserOutlined","name","MainLayout","content","layout","header","type","Date","getFullYear","Main","span","PRESENTED_IMAGE_DEFAULT","lg","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d51e68e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"mainLayout_content__t_5Cw\",\"layout\":\"mainLayout_layout__2a99x\",\"header\":\"mainLayout_header__3kSTg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"autocomplete\":\"Search_autocomplete__-EXji\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tags\":\"GistsItem_tags__3DUlq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"meta\":\"UserAvatar_meta__1sjUc\"};","import { createContext, useContext, Dispatch, SetStateAction } from 'react';\r\nimport { RestEndpointMethodTypes } from '@octokit/rest';\r\n\r\nexport interface AppContextType {\r\n  currentSearchValue?: string;\r\n  setCurrentSearchValue: Dispatch<SetStateAction<AppContextType['currentSearchValue']>>;\r\n  currentUser?: RestEndpointMethodTypes['users']['getByUsername']['response']['data'] | null;\r\n  setCurrentUser: Dispatch<SetStateAction<AppContextType['currentUser']> | null>;\r\n}\r\n\r\nexport const AppContext = createContext({} as AppContextType);\r\n\r\nexport const useAppContext = () => {\r\n  const context = useContext<AppContextType>(AppContext);\r\n\r\n  if (!context) {\r\n    throw new Error('useAppContext should be used within a AppContext');\r\n  }\r\n  return context;\r\n};\r\n","import React, { FC, useState } from 'react';\r\nimport { AppContext, AppContextType } from './AppContext';\r\nimport { RestEndpointMethodTypes } from '@octokit/rest';\r\n\r\nexport const AppContextProvider: FC = ({ children }) => {\r\n  const [currentSearchValue, setCurrentSearchValue] = useState<\r\n    AppContextType['currentSearchValue']\r\n  >();\r\n\r\n  const [currentUser, setCurrentUser] = useState<\r\n    RestEndpointMethodTypes['users']['getByUsername']['response']['data'] | null\r\n  >();\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{ currentSearchValue, setCurrentSearchValue, currentUser, setCurrentUser }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { AppContextProvider } from 'components/App/AppContextProvider';\r\n\r\nexport const AppProviders: FC = ({ children }) => {\r\n  return <AppContextProvider>{children}</AppContextProvider>;\r\n};\r\n","import React from 'react';\n\nimport './App.less';\nimport { AppProviders } from 'AppProviders';\nimport { Main } from 'components';\n\nexport const App = () => {\n  return (\n    <AppProviders>\n      <Main />\n    </AppProviders>\n  );\n};\n","import { Octokit } from '@octokit/rest';\r\n\r\nexport const octokit = new Octokit();\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { octokit } from 'api';\r\nimport { Input, AutoComplete, notification, Space, Typography } from 'antd';\r\nimport classNames from './Search.module.scss';\r\nimport { SelectProps } from 'antd/es/select';\r\nimport { useAppContext } from 'components/App/AppContextProvider';\r\nimport { components } from '@octokit/openapi-types';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\n\r\ninterface Option {\r\n  value: components['schemas']['user-search-result-item'];\r\n}\r\nconst { autocomplete } = classNames;\r\nconst { Text } = Typography;\r\n\r\nexport const Search = () => {\r\n  const { setCurrentSearchValue, setCurrentUser } = useAppContext();\r\n\r\n  const debounceId = useRef<number | undefined>();\r\n\r\n  const [options, setOptions] = useState<SelectProps<Option>['options']>([]);\r\n  const [isSearching, setIsSearching] = useState(false);\r\n\r\n  const [currentUserIsLoading, setCurrentUserIsLoading] = useState(false);\r\n\r\n  const searchCurrentUser = useCallback(\r\n    (value: string) => {\r\n      if (value) {\r\n        setCurrentUserIsLoading(true);\r\n        setCurrentUser(undefined);\r\n\r\n        octokit.users\r\n          .getByUsername({\r\n            username: value,\r\n          })\r\n          .then(({ data }) => {\r\n            setCurrentUser(data);\r\n          })\r\n          .catch((err) => {\r\n            if (err.status === 404) {\r\n              setCurrentUser(null);\r\n            } else {\r\n              notification.error({\r\n                message: 'Error fetching user information',\r\n                description: err.message,\r\n              });\r\n            }\r\n          })\r\n          .finally(() => {\r\n            setCurrentUserIsLoading(false);\r\n          });\r\n      } else {\r\n        setCurrentUser(undefined);\r\n      }\r\n    },\r\n    [setCurrentUser]\r\n  );\r\n\r\n  const handleSearch = useCallback(\r\n    (value: string) => {\r\n      clearTimeout(debounceId.current);\r\n\r\n      debounceId.current = window.setTimeout(() => {\r\n        if (!value) {\r\n          setOptions([]);\r\n        } else if (!isSearching) {\r\n          setIsSearching(true);\r\n\r\n          octokit.search\r\n            .users({\r\n              q: value,\r\n            })\r\n            .then(({ data }) => {\r\n              setOptions(\r\n                data.items.map((item) => ({\r\n                  value: item.login,\r\n                  label: (\r\n                    <Space size=\"small\">\r\n                      <Avatar src={item.avatar_url} />\r\n                      <Text>{item.login}</Text>\r\n                    </Space>\r\n                  ),\r\n                }))\r\n              );\r\n            })\r\n            .catch((err) => {\r\n              notification.error({\r\n                message: 'Error searching users',\r\n                description: err.message,\r\n              });\r\n            })\r\n            .finally(() => setIsSearching(false));\r\n        }\r\n      }, 300);\r\n    },\r\n    [isSearching]\r\n  );\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearTimeout(debounceId.current);\r\n    };\r\n  }, []);\r\n\r\n  const onSelect = useCallback<React.KeyboardEventHandler<HTMLInputElement> | any>(\r\n    (value: string, { option }: any) => {\r\n      setCurrentSearchValue(value);\r\n      searchCurrentUser(value);\r\n    },\r\n    [searchCurrentUser, setCurrentSearchValue]\r\n  );\r\n\r\n  const onPressEnter = useCallback(\r\n    (e) => {\r\n      setCurrentSearchValue(e.currentTarget.value);\r\n      searchCurrentUser(e.currentTarget.value);\r\n    },\r\n    [searchCurrentUser, setCurrentSearchValue]\r\n  );\r\n\r\n  return (\r\n    <AutoComplete\r\n      defaultActiveFirstOption={false}\r\n      className={autocomplete}\r\n      options={options}\r\n      onSelect={onSelect}\r\n      onSearch={handleSearch}\r\n      notFoundContent=\"No users found\"\r\n    >\r\n      <Input.Search\r\n        size=\"large\"\r\n        placeholder=\"Search for a user\"\r\n        onPressEnter={onPressEnter}\r\n        enterButton\r\n        loading={currentUserIsLoading}\r\n      />\r\n    </AutoComplete>\r\n  );\r\n};\r\n","import React, { FC, memo, useEffect, useState } from 'react';\r\n\r\nimport Text from 'antd/lib/typography/Text';\r\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport prism from 'react-syntax-highlighter/dist/esm/styles/prism/prism';\r\nimport { RestEndpointMethodTypes } from '@octokit/rest';\r\nimport { notification, Skeleton } from 'antd';\r\n\r\ninterface Props {\r\n  file: RestEndpointMethodTypes['gists']['listForUser']['response']['data'][number]['files'][number];\r\n}\r\n\r\nexport const GistsFile: FC<Props> = memo(({ file }) => {\r\n  const [currentSnippet, setCurrentSnippet] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n\r\n    fetch(file.raw_url as string)\r\n      .then((res) => res.text())\r\n      .then((data) => {\r\n        const splittedData = data.split('\\n').filter((word) => word);\r\n        splittedData.length = 3;\r\n\r\n        setCurrentSnippet(splittedData.join('\\n'));\r\n      })\r\n      .catch((err) => {\r\n        notification.error({\r\n          message: 'Error fetching file code',\r\n          description: err.message,\r\n        });\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <Skeleton loading={isLoading}>\r\n      <Text>\r\n        <SyntaxHighlighter\r\n          lineNumberStyle={{ color: 'red', textAlign: 'right', width: '20px', fontSize: '12px' }}\r\n          showLineNumbers\r\n          language={file?.language?.toLowerCase()}\r\n          style={prism}\r\n        >\r\n          {currentSnippet}\r\n        </SyntaxHighlighter>\r\n      </Text>\r\n    </Skeleton>\r\n  );\r\n});\r\n","import React, { FC } from 'react';\r\nimport { RestEndpointMethodTypes } from '@octokit/rest';\r\nimport { GistsFile } from '../GistsFile/GistsFile';\r\nimport { Card, Col, Row, Tag } from 'antd';\r\n\r\ninterface Props {\r\n  file: RestEndpointMethodTypes['gists']['listForUser']['response']['data'][number]['files'][number];\r\n}\r\n\r\nexport const GistsFiles: FC<Props> = ({ file }) => {\r\n  return (\r\n    <Card\r\n      title={\r\n        <Row align=\"middle\">\r\n          {!!file?.language && (\r\n            <Col>\r\n              <Tag style={{ display: 'inline-flex', alignItems: 'center' }}>{file?.language}</Tag>\r\n            </Col>\r\n          )}\r\n          <Col>{file.filename}</Col>\r\n        </Row>\r\n      }\r\n    >\r\n      <GistsFile file={file} />\r\n    </Card>\r\n  );\r\n};\r\n","import React, { FC, useEffect, useMemo, useState } from 'react';\r\nimport { GistsFiles } from '../GistsFiles';\r\nimport { RestEndpointMethodTypes } from '@octokit/rest';\r\nimport { Avatar, Card, Col, notification, Row, Space, Tag } from 'antd';\r\nimport classNames from './GistsItem.module.scss';\r\nimport { FileOutlined, ForkOutlined } from '@ant-design/icons';\r\nimport Text from 'antd/lib/typography/Text';\r\nimport { octokit } from 'api';\r\n\r\ninterface Props {\r\n  item: RestEndpointMethodTypes['gists']['listForUser']['response']['data'][number];\r\n}\r\n\r\nexport const GistsItem: FC<Props> = ({ item }) => {\r\n  const [forks, setForks] = useState<\r\n    RestEndpointMethodTypes['gists']['listForks']['response']['data']\r\n  >([]);\r\n\r\n  const files = useMemo(() => {\r\n    return Object.values(item.files);\r\n  }, [item.files]);\r\n\r\n  const uniqueLanguages = useMemo(() => {\r\n    return [...new Set(files.map((file) => file.language))];\r\n  }, [files]);\r\n\r\n  useEffect(() => {\r\n    octokit.gists\r\n      .listForks({\r\n        gist_id: item.id,\r\n      })\r\n      .then(({ data }) => {\r\n        setForks(data);\r\n      })\r\n      .catch((err) => {\r\n        notification.error({\r\n          message: 'Error fetching forks',\r\n          description: err.message,\r\n        });\r\n      });\r\n  }, [item.id]);\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        hoverable\r\n        title={\r\n          <>\r\n            <Row gutter={[24, 24]}>\r\n              <Col flex=\"auto\">{item.description || 'No title'}</Col>\r\n\r\n              <Col>\r\n                <Space size=\"small\">\r\n                  <FileOutlined />\r\n                  <Text>\r\n                    {files.length} file{files.length === 1 ? '' : 's'}\r\n                  </Text>\r\n                </Space>\r\n              </Col>\r\n              <Col>\r\n                <Space size=\"small\">\r\n                  <ForkOutlined />\r\n                  <Text>\r\n                    {forks.length} fork{forks.length === 1 ? '' : 's'}\r\n                  </Text>\r\n                </Space>\r\n              </Col>\r\n              {!!forks.length && (\r\n                <Col>\r\n                  <Avatar.Group maxCount={3}>\r\n                    {forks.map((fork, i) => (\r\n                      <Avatar size={30} key={i} src={fork.owner?.avatar_url} />\r\n                    ))}\r\n                  </Avatar.Group>\r\n                </Col>\r\n              )}\r\n            </Row>\r\n            <Row gutter={[24, 24]}>\r\n              <Col>\r\n                <div className={classNames.tags}>\r\n                  {uniqueLanguages.map(\r\n                    (language, i) =>\r\n                      !!language && (\r\n                        <Tag key={i} style={{ display: 'inline-flex', alignItems: 'center' }}>\r\n                          {language}\r\n                        </Tag>\r\n                      )\r\n                  )}\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        }\r\n        style={{ marginBottom: 24, borderColor: 'lightgray' }}\r\n      >\r\n        <GistsFiles file={files[0]} />\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { octokit } from 'api';\r\nimport { RestEndpointMethodTypes } from '@octokit/rest';\r\nimport { useAppContext } from 'components';\r\nimport { Card, Col, Empty, notification, Row, Spin } from 'antd';\r\nimport { GistsItem } from './GistsItem';\r\n\r\nexport const Gists = () => {\r\n  const { currentUser } = useAppContext();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [gistsList, setGistsList] = useState<\r\n    RestEndpointMethodTypes['gists']['listForUser']['response']['data']\r\n  >();\r\n\r\n  useEffect(() => {\r\n    if (!isLoading && currentUser?.login) {\r\n      setGistsList([]);\r\n\r\n      setIsLoading(true);\r\n\r\n      octokit.gists\r\n        .listForUser({\r\n          username: currentUser.login,\r\n        })\r\n        .then(({ data }) => {\r\n          setGistsList(data);\r\n        })\r\n        .catch((err) => {\r\n          notification.error({\r\n            message: 'Error fetching gists',\r\n            description: err.message,\r\n          });\r\n        })\r\n        .finally(() => {\r\n          setIsLoading(false);\r\n        });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentUser?.login]);\r\n\r\n  return (\r\n    <>\r\n      {currentUser && (\r\n        <>\r\n          {isLoading === true && (\r\n            <Card bordered style={{ borderColor: 'lightgray' }}>\r\n              <Row justify=\"center\">\r\n                <Col>\r\n                  <Spin spinning />\r\n                </Col>\r\n              </Row>\r\n            </Card>\r\n          )}\r\n\r\n          {isLoading === false && (\r\n            <>\r\n              {gistsList?.length ? (\r\n                gistsList?.map((gistItem) => {\r\n                  return <GistsItem key={gistItem.id} item={gistItem} />;\r\n                })\r\n              ) : (\r\n                <Card bordered style={{ borderColor: 'lightgray' }}>\r\n                  <Empty\r\n                    description=\"This user has no gists\"\r\n                    image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n                  />\r\n                </Card>\r\n              )}\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useAppContext } from 'components';\r\nimport { Avatar, Card } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport classNames from './UserAvatar.module.scss';\r\n\r\nconst { Meta } = Card;\r\n\r\nexport const UserAvatar = () => {\r\n  const { currentUser } = useAppContext();\r\n\r\n  return (\r\n    <>\r\n      {currentUser && (\r\n        <div style={{ position: 'sticky', top: 24 }}>\r\n          <Card bordered style={{ borderColor: 'lightgray' }}>\r\n            <Meta\r\n              className={classNames.meta}\r\n              avatar={<Avatar src={currentUser?.avatar_url} size={160} icon={<UserOutlined />} />}\r\n              title={currentUser?.name || <p />}\r\n              description={currentUser?.login || <p />}\r\n            />\r\n          </Card>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { Col, Layout, Row } from 'antd';\r\nimport { Content, Footer, Header } from 'antd/lib/layout/layout';\r\nimport classNames from './mainLayout.module.scss';\r\nimport { Search } from 'components';\r\nimport Text from 'antd/lib/typography/Text';\r\n\r\nexport const MainLayout: FC = ({ children }) => {\r\n  const { content, layout, header } = classNames;\r\n\r\n  return (\r\n    <Layout className={layout}>\r\n      <Header className={header}>\r\n        <Search />\r\n      </Header>\r\n      <Content className={content}>{children}</Content>\r\n      <Footer>\r\n        <Row justify=\"center\">\r\n          <Col>\r\n            <Text type=\"secondary\">&copy; {new Date().getFullYear()} All rights reserved</Text>\r\n          </Col>\r\n        </Row>\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Gists, useAppContext, UserAvatar } from 'components';\r\nimport { MainLayout } from 'layouts';\r\nimport { Col, Empty, Row } from 'antd';\r\n\r\nexport const Main = () => {\r\n  const { currentUser, currentSearchValue } = useAppContext();\r\n  return (\r\n    <MainLayout>\r\n      <Row gutter={[24, 24]}>\r\n        {currentUser === null ? (\r\n          <Col span={24}>\r\n            <Row justify=\"center\">\r\n              <Col>\r\n                <Empty\r\n                  description={`No user ${currentSearchValue} found`}\r\n                  image={Empty.PRESENTED_IMAGE_DEFAULT}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        ) : (\r\n          <>\r\n            <Col span={24} lg={6}>\r\n              <UserAvatar />\r\n            </Col>\r\n            <Col span={24} lg={18}>\r\n              <Gists />\r\n            </Col>\r\n          </>\r\n        )}\r\n      </Row>\r\n    </MainLayout>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './components';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}